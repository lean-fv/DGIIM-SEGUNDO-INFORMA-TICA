/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View.GUI;

import View.DeepSpaceView;
import java.util.ArrayList;
import controller.Controller;
import javax.swing.JOptionPane;

import deepspace.GameState;

/**
 *
 * @author jaime
 */

//Ventana Principal del programa.
public class MainWindow extends javax.swing.JFrame implements DeepSpaceView {

    //Esta clase será singleton, ya que para una determinada vista de la aplicación, solo va a existir una
    //ventana principal.
    private static MainWindow instance = null;
    
    //Nombre del cuadro de dialogo que se muestra al ejecutar el main
    private String appName;
    
    //Estacion del jugador.
    private SpaceStationView stationView;
    
    //Estacion enemiga.
    private EnemyStarShipView enemyView;
           
   
    //instanciamos el objeto único de la clase en el momento de la primera consulta y no en el
    //momento de la declaración.
    //Así solamente la vista que se vaya a usar sea la que se construya. El resto de vistas posibles no se
    //construyen y no consumen recursos.
    public static MainWindow getInstance() {
      if (instance == null) {
        instance = new MainWindow();
      }
      return instance;
    }
    
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        
        appName="Deepspace";
        this.setTitle(appName);
        
        
        stationView = new SpaceStationView();
        //jPSpaceStation.add(stationView); //No estoy seguro
        enemyView = new EnemyStarShipView();
        //jPEnemy.add(enemyView);
        
        repaint();
        
        
        //Instrucciones para que la
        //aplicación finalice cuando se cierra la ventana principal de la aplicación.
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                Controller.getInstance().finish(0);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPSpaceStation = new javax.swing.JPanel();
        jPEnemy = new javax.swing.JPanel();
        jBCombat = new javax.swing.JButton();
        jBNextTurn = new javax.swing.JButton();
        jBExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jBCombat.setText("COMBATIR");
        jBCombat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCombatActionPerformed(evt);
            }
        });

        jBNextTurn.setText("Siguiente Turno");
        jBNextTurn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNextTurnActionPerformed(evt);
            }
        });

        jBExit.setText("Salir");
        jBExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jPSpaceStation, javax.swing.GroupLayout.PREFERRED_SIZE, 980, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jPEnemy, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBNextTurn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBExit))
                            .addComponent(jBCombat, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jPEnemy, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jBCombat, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(72, 72, 72)
                                .addComponent(jBNextTurn)
                                .addGap(16, 16, 16))
                            .addComponent(jBExit, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jPSpaceStation, javax.swing.GroupLayout.PREFERRED_SIZE, 852, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBCombatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCombatActionPerformed
        // TODO add your handling code here:
        Controller.getInstance().combat();
        updateView();
        revalidate();
    }//GEN-LAST:event_jBCombatActionPerformed

    private void jBExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBExitActionPerformed
        // TODO add your handling code here:
        Controller.getInstance().finish(0);
    }//GEN-LAST:event_jBExitActionPerformed

    private void jBNextTurnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNextTurnActionPerformed
        // TODO add your handling code here:
        Controller.getInstance().nextTurn();
        updateView();
        revalidate();
    }//GEN-LAST:event_jBNextTurnActionPerformed

    //Obtiene el nombre de la aplicación
    public String getAppName(){
        return appName;
    }
    
    /*
    El método updateView() de la vista puede consultar al modelo, a través del controlador, en qué
estado se encuentra y usar esta información para habilitar/deshabilitar los elementos que
correspondan con el método setEnable(boolean onOff).
    */
    @Override
    public void updateView(){
        
        //jPSpaceStation.removeAll();
        //jPEnemy.removeAll();
        
        stationView.setSpaceStation(Controller.getInstance().getUIversion().getCurrentStation());
        jPSpaceStation.add(stationView);
        
        enemyView.setEnemy(Controller.getInstance().getUIversion().getCurrentEnemy());
        jPEnemy.add(enemyView);
        
        GameState gameState = Controller.getInstance().getState();
        if(gameState == GameState.INIT || gameState == GameState.BEFORECOMBAT){
            jBCombat.setEnabled(true);
            jBNextTurn.setEnabled(false);
        }
        
        if(gameState == GameState.AFTERCOMBAT){
            jBCombat.setEnabled(false);
            jBNextTurn.setEnabled(true);
        }
        
        repaint();
        
    }
    
    //Este método sólo hace visible la vista
    @Override
    public void showView(){
        
        this.setVisible(true);
        
    }
    
    @Override
    public ArrayList<String> readNamePlayers(){
        
        NamesCapture namesCapture = new NamesCapture (this);
        return namesCapture.getNames();
        
    }
    
    @Override
    public boolean confirmExitMessage(){
        
        return (JOptionPane.showConfirmDialog(this, "¿Estás segur@ de que deseas salir?", getAppName(), JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION);
        
    }
    
    @Override
    public void nextTurnNotAllowedMessage(){
        
        JOptionPane.showMessageDialog(this, "No puedes avanzar de turno, \nno has cumplido tu castigo.", getAppName(), JOptionPane.ERROR_MESSAGE);
        
    }
    
    @Override
    public void lostCombatMessage(){
        
        JOptionPane.showMessageDialog(this, "Has PERDIDO el combate. \nCumple tu castigo.", getAppName(), JOptionPane.INFORMATION_MESSAGE);
        
    }
    
    @Override
    public void escapeMessage(){
        
        JOptionPane.showMessageDialog(this, "Has logrado ESCAPAR. \nEres un gallina espacial.", getAppName(), JOptionPane.INFORMATION_MESSAGE);
        
    }
    
    
    
    @Override
    public void wonCombatMessage(){
        
        JOptionPane.showMessageDialog(this, "Has GANADO el combate. \nDisfruta de tu botín.", getAppName(), JOptionPane.INFORMATION_MESSAGE);
        
    }
    
    
    @Override
    public void wonGameMessage(){
        
        JOptionPane.showMessageDialog(this, "ENHORABUENA!!. \nHas ganado el juego!!.", getAppName(), JOptionPane.INFORMATION_MESSAGE);
        
    }
    
    @Override
    public void conversionMessage(){
        
        if(Controller.getInstance().getUIversion().getCurrentEnemy().getLoot().isGetEfficient()){
            JOptionPane.showMessageDialog(this, "Has GANADO el combate. \nAdemás te has CONVERTIDO en una estación EFICIENTE. \nDisfruta de tu botín.", getAppName(), JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            JOptionPane.showMessageDialog(this, "Has GANADO el combate. \nAdemás te has CONVERTIDO en una CIUDAD ESPACIAL. \nDisfruta de tu botín.", getAppName(), JOptionPane.INFORMATION_MESSAGE);
        }
        
    }
    
    @Override
    public void noCombatMessage(){
        
        JOptionPane.showMessageDialog(this, "No puedes combatir en este momento.", getAppName(), JOptionPane.ERROR_MESSAGE);
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBCombat;
    private javax.swing.JButton jBExit;
    private javax.swing.JButton jBNextTurn;
    private javax.swing.JPanel jPEnemy;
    private javax.swing.JPanel jPSpaceStation;
    // End of variables declaration//GEN-END:variables
}
