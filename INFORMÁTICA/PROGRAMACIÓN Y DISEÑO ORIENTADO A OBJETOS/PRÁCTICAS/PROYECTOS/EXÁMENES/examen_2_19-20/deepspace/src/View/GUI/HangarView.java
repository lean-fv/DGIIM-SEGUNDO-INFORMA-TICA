/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package View.GUI;

import java.awt.Component;
import deepspace.HangarToUI;
import deepspace.WeaponToUI;
import deepspace.ShieldToUI;
import java.util.ArrayList;
/**
 *
 * @author jaime
 */
public class HangarView extends javax.swing.JPanel {

    
    /**
     * Creates new form HangarView
     */
    public HangarView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLHangar = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPWeapons = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPShields = new javax.swing.JPanel();

        setBackground(new java.awt.Color(153, 153, 153));

        jLHangar.setText("Hangar");

        jPWeapons.setBorder(javax.swing.BorderFactory.createTitledBorder("Weapons"));
        jScrollPane1.setViewportView(jPWeapons);

        jPShields.setBorder(javax.swing.BorderFactory.createTitledBorder("Shields"));
        jScrollPane2.setViewportView(jPShields);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLHangar)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(9, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 908, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 908, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLHangar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(12, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    void setHangar(HangarToUI hangar){
        
        if(hangar==null){
            setVisible(false);
        } else {
            
            jLHangar.setText("Hangar con " + Integer.toString(hangar.getMaxElements()) + " lugares");
        
            jPWeapons.removeAll();
            jPShields.removeAll();

            ArrayList<WeaponToUI> weapons = hangar.getWeapons();
            ArrayList<ShieldToUI> shields = hangar.getShieldBoosters();

            WeaponView weaponView;
            ShieldBoosterView shieldView;

            for(WeaponToUI w : weapons){

                weaponView = new WeaponView();
                weaponView.setWeapon(w);
                jPWeapons.add(weaponView);

            }

            for(ShieldToUI s : shields){

                shieldView = new ShieldBoosterView();
                shieldView.setShield(s);
                jPShields.add(shieldView);
            
            }
            
        }
  
        
        repaint();
        revalidate();
        
    }
    
    //Consultor en la clase contenerdora pasa saber que vistan estan seleccionadas
    
    ArrayList<Integer> getSelectedWeapons () {
        ArrayList<Integer> selectedWeapons = new ArrayList<>();
        int i = 0;
        for (Component c : jPWeapons.getComponents()) {
            if (((WeaponView) c).isSelected()) {
                selectedWeapons.add(i);
            }
            i++;
        }
        return selectedWeapons;
    }
    
    ArrayList<Integer> getSelectedShields () {
        ArrayList<Integer> selectedShields = new ArrayList<>();
        int i = 0;
        for (Component c : jPShields.getComponents()) {
            if (((ShieldBoosterView) c).isSelected()) {
                selectedShields.add(i);
            }
            i++;
        }
        return selectedShields;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLHangar;
    private javax.swing.JPanel jPShields;
    private javax.swing.JPanel jPWeapons;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
